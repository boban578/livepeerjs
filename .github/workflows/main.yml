on: push
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js 10.x
      uses: actions/setup-node@v1
      with:
        node-version: "10.x"
    - name: build
      env: 
        BRANCH: ${{ github.head_ref }}
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        # This is a new record for times I've typed "postgres" on one line!
        LP_POSTGRES_URL: postgresql://postgres:postgres@postgres/livepeerapi
      run: |-
        # docker login
        docker login -u $DOCKER_USER -p $DOCKER_PASS

        # yarn install
        yarn install --frozen-lockfile
        yarn postinstall

        # Kick off parallel Zeit Now install
        if [[ "$BRANCH" == "latest" ]]; then
          yarn run now:build-production &
          NOW_BUILD=$!
        else
          yarn run now:build &
          NOW_BUILD=$!
        fi
        
        # Run tests
        yarn test

        # Docker stuff
        export DOCKER_TAG=$(echo $BRANCH | tr -cd '[:alnum:]_')
        yarn run lerna-run docker:build
        yarn run lerna-run docker:push

        # Wait for finished Now build
        wait $NOW_BUILD

        # Livepeer internal build alerting
        curl -X POST https://holy-bread-207a.livepeer.workers.dev

        if [[ "$BRANCH" == "master" ]]; then
          yarn run deploy:staging
        fi

        if [[ "$BRANCH" == "latest" ]]; then
          yarn run deploy:production
        fi

